{
  "custom": {
    "directories": [],
    "structure": []
  },
  "params": {
    "directory": "",
    "includeFiles": false,
    "requestUpdate": false,
    "selectedPath": false
  },
  "propConfig": {
    "custom.directories": {
      "binding": {
        "config": {
          "path": "view.params.directory"
        },
        "transforms": [
          {
            "code": "\timport os\n\t\n\tdef list_directories(directory):\n\t    try:\n\t        # Get a list of all items in the directory\n\t        items \u003d os.listdir(directory)\n\t        # Filter out directories from the list\n\t        directories \u003d [item for item in items if os.path.isdir(os.path.join(directory, item))]\n\t        return directories\n\t    except OSError as e:\n\t        print(\"Error listing directories: {}\".format(e))\n\t        return []\n\t\n\t# Specify the directory to browse\n\tdirectories\u003d[]\n\tdirectory \u003d value\n\t\n\t# Get the list of all directories in the directory\n\tdirectory_list \u003d list_directories(directory)\n\t\n\t# Print the directory list\n\tfor directory_name in directory_list:\n\t    directories.append(directory_name)\n\t\n\treturn directories",
            "type": "script"
          }
        ],
        "type": "property"
      },
      "persistent": true
    },
    "custom.structure": {
      "binding": {
        "config": {
          "struct": {
            "directory": "{view.params.directory}",
            "showFiles": "{view.params.includeFiles}"
          },
          "waitOnAll": true
        },
        "transforms": [
          {
            "code": "\timport os\n\t\n\t  # The top-level directory to process\n\t\n\tdef list_files(directory):\n\t    \"\"\"\n\t    List files in the given directory.\n\t    \"\"\"\n\t    try:\n\t        return [file for file in os.listdir(directory) if os.path.isfile(os.path.join(directory, file))]\n\t    except OSError as e:\n\t        print(\"Error listing files: {}\".format(e))\n\t        return []\n\t\n\tdef list_directories(directory):\n\t    \"\"\"\n\t    List directories in the given directory.\n\t    \"\"\"\n\t    try:\n\t        return [item for item in os.listdir(directory) if os.path.isdir(os.path.join(directory, item))]\n\t    except OSError as e:\n\t        print(\"Error listing directories: {}\".format(e))\n\t        return []\n\t\n\tdef createTreeItem(filename, full_path):\n\t    \"\"\"\n\t    Create a tree item for a file.\n\t    \"\"\"\n\t    return {\n\t        \"label\": filename,\n\t        \"expanded\": True,\n\t        \"data\": {\u0027filename\u0027: filename, \u0027path\u0027: full_path},\n\t        \"items\": []\n\t    }\n\t\n\tdef createDirItem(directory, parentPath, files):\n\t    \"\"\"\n\t    Recursively create a tree item for a directory and its contents.\n\t    \"\"\"\n\t    full_path \u003d os.path.join(parentPath, directory)\n\t    items \u003d []\n\t\n\t    # Add files in the current directory\n\t    listed_files \u003d list_files(full_path)\n\t    if files:\n\t\t    for filename in listed_files:\n\t\t        file_full_path \u003d os.path.join(full_path, filename)\n\t\t        items.append(createTreeItem(filename, file_full_path))\n\t\n\t    # Add subdirectories recursively\n\t    subdirectories \u003d list_directories(full_path)\n\t    for subdirectory in subdirectories:\n\t        items.append(createDirItem(subdirectory, full_path, files))\n\t\n\t    return {\n\t        \"label\": directory,\n\t        \"expanded\": False,\n\t        \"data\": {\u0027directory\u0027: full_path},\n\t        \"icon\": {\"path\": \"material/folder_open\", \"color\": \"\", \"style\": {}},\n\t        \"items\": items\n\t    }\n\t\n\tdef build_file_structure(parentPath, files):\n\t    \"\"\"\n\t    Build the file structure tree starting from the given parent path.\n\t    \"\"\"\n\t    fileStructure \u003d []\n\t\n\t    # Add the top-level directories\n\t    directory_list \u003d list_directories(parentPath)\n\t    for directory_name in directory_list:\n\t        fileStructure.append(createDirItem(directory_name, parentPath, files))\n\t\n\t    # Add the top-level files\n\t    parentFiles \u003d list_files(parentPath)\n\t    if files:\n\t\t    for filename in parentFiles:\n\t\t        file_full_path \u003d os.path.join(parentPath, filename)\n\t\t        fileStructure.append(createTreeItem(filename, file_full_path))\n\t\n\t    return fileStructure\n\t\n\t# Generate the file structure tree\n\tparentPath \u003d value[\u0027directory\u0027]\n\tshowFiles\u003d value[\u0027showFiles\u0027]\n\tfileStructure \u003d build_file_structure(parentPath, showFiles)\n\treturn fileStructure",
            "type": "script"
          }
        ],
        "type": "expr-struct"
      },
      "persistent": true
    },
    "params.directory": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.includeFiles": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.requestUpdate": {
      "onChange": {
        "enabled": null,
        "script": "\tif currentValue.value:\n\t\tself.refreshBinding(\u0027custom.structure\u0027)\n\t\tself.params.requestUpdate\u003dFalse"
      },
      "paramDirection": "inout",
      "persistent": true
    },
    "params.selectedPath": {
      "binding": {
        "config": {
          "path": "/root/Tree.props.selectionData[0].value"
        },
        "overlayOptOut": true,
        "transforms": [
          {
            "code": "\tif value is None:\n\t\treturn False\n\treturn value",
            "type": "script"
          }
        ],
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    }
  },
  "props": {},
  "root": {
    "children": [
      {
        "meta": {
          "name": "Tree"
        },
        "position": {
          "grow": 1
        },
        "propConfig": {
          "props.items": {
            "binding": {
              "config": {
                "path": "view.custom.structure"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "appearance": {
            "defaultNodeIcons": {
              "collapsed": {
                "path": "material/folder"
              },
              "empty": {
                "path": "material/stop"
              },
              "expanded": {
                "path": "material/folder_open"
              }
            },
            "expandIcons": {
              "collapsed": {
                "path": "material/arrow_right"
              },
              "expanded": {
                "path": "material/arrow_drop_down"
              }
            }
          }
        },
        "type": "ia.display.tree"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "direction": "column"
    },
    "type": "ia.container.flex"
  }
}